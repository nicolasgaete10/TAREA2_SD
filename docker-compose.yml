version: "3.8"

services:
  # --- 1. Dependencias Base (Persistencia) ---
  # (Sin cambios de la Tarea 1)
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: yahoo_respuestas
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:6-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # --- 2. Tarea 2: Bus de Mensajes (Kafka) ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      # Puerto para acceder a Kafka DESDE FUERA de la red de Docker (ej. tu máquina local)
      - "9092:9092"
      # Puerto para la comunicación INTERNA entre contenedores de Docker
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # --- 3. Tarea 2: Procesamiento de Flujos (Flink) ---
  flink-jobmanager:
    image: flink:1.14.3-scala_2.12-java11
    container_name: flink_jobmanager
    ports:
      - "8081:8081" # Interfaz web de Flink
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink_jobmanager
    volumes:
      - flink_jobmanager_data:/opt/flink/data
    depends_on:
      - kafka

  flink-taskmanager:
    image: flink:1.14.3-scala_2.12-java11
    container_name: flink_taskmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink_jobmanager
    depends_on:
      - flink-jobmanager
    scale: 1 # Puedes aumentar este número para tener más workers

  # --- 4. Servicios de Aplicación (Modificados para Tarea 2) ---

  # Este servicio ahora será nuestro Productor de Kafka
  traffic_generator:
    build: ./traffic_generator
    container_name: traffic_generator
    environment:
      # Dirección de Kafka (interna de Docker)
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      # Topic donde se publicarán las preguntas
      - KAFKA_TOPIC=preguntas_pendientes
      - DATASET_PATH=/app/Data/test.csv
    volumes:
      - ./Data:/app/Data
    depends_on:
      - kafka 
    restart: on-failure

  # Este NUEVO servicio reemplaza a 'score_service' y 'cache_service'
  # Será un Consumidor de Kafka
  procesador_llm:
    build: ./procesador_llm
    container_name: procesador_llm
    environment:
      - GEMINI_API_KEY={clave}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_INPUT_TOPIC=preguntas_pendientes
      - KAFKA_OUTPUT_TOPIC=resultados_procesados
      - REDIS_URL=redis://redis_cache:6379
    volumes:
      - ./Data:/app/Data # Si reutiliza la lógica de score
    depends_on:
      - kafka
      - redis
    restart: on-failure

volumes:
  postgres_data:
  flink_jobmanager_data:
