version: "3.8"

services:
  # Base de datos para almacenamiento persistente
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: yahoo_answers
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Sistema de caché en memoria
  redis:
    image: redis:6-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    command:
      - redis-server
      - --maxmemory 256mb # Limita la memoria a 256MB
      - --maxmemory-policy allkeys-lru # Política LRU para la gestión de memoria CACHE

  # Servicio que se conecta al LLM y la BD
  score_service:
    build: ./score_service
    container_name: score_service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres_db:5432/yahoo_answers
      - GEMINI_API_KEY=AIzaSyCYzObA-SYdQchQysAZGB1trriSUziwV0I
      - DATASET_PATH=/app/Data/test.csv
    volumes:
      - ./Data:/app/Data
    depends_on:
      - postgres
    ports:
      - "5001:5001"

  # Servicio de caché que actúa como intermediario
  cache_service:
    build: ./cache_service
    container_name: cache_service
    environment:
      # El caché necesita saber dónde están Redis y el servicio de score
      - REDIS_URL=redis://redis_cache:6379
      - SCORE_SERVICE_URL=http://score_service:5001/process
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - score_service

  # Servicio que simula el tráfico de usuarios
  traffic_generator:
    build: ./traffic_generator
    container_name: traffic_generator
    environment:
      # ¡IMPORTANTE! Ahora el generador de tráfico apunta al servicio de caché
      - CACHE_SERVICE_URL=http://cache_service:5000/check
      - DATASET_PATH=/app/Data/test.csv
    volumes:
      - ./Data:/app/Data
    depends_on:
      - cache_service

volumes:
  postgres_data:
